/*
 * This file is generated by jOOQ.
 */
package com.clevergang.dbtests.repository.impl.jooq.generated.tables;


import com.clevergang.dbtests.repository.impl.jooq.generated.Public;
import com.clevergang.dbtests.repository.impl.jooq.generated.tables.records.RegisterEmployeeRecord;

import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegisterEmployee extends TableImpl<RegisterEmployeeRecord> {

    private static final long serialVersionUID = -1882772715;

    /**
     * The reference instance of <code>public.register_employee</code>
     */
    public static final RegisterEmployee REGISTER_EMPLOYEE = new RegisterEmployee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegisterEmployeeRecord> getRecordType() {
        return RegisterEmployeeRecord.class;
    }

    /**
     * The column <code>public.register_employee.employee_id</code>.
     */
    public final TableField<RegisterEmployeeRecord, Integer> EMPLOYEE_ID = createField("employee_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.register_employee.department_id</code>.
     */
    public final TableField<RegisterEmployeeRecord, Integer> DEPARTMENT_ID = createField("department_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.register_employee.company_id</code>.
     */
    public final TableField<RegisterEmployeeRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.register_employee</code> table reference
     */
    public RegisterEmployee() {
        this(DSL.name("register_employee"), null);
    }

    /**
     * Create an aliased <code>public.register_employee</code> table reference
     */
    public RegisterEmployee(String alias) {
        this(DSL.name(alias), REGISTER_EMPLOYEE);
    }

    /**
     * Create an aliased <code>public.register_employee</code> table reference
     */
    public RegisterEmployee(Name alias) {
        this(alias, REGISTER_EMPLOYEE);
    }

    private RegisterEmployee(Name alias, Table<RegisterEmployeeRecord> aliased) {
        this(alias, aliased, new Field[6]);
    }

    private RegisterEmployee(Name alias, Table<RegisterEmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RegisterEmployee(Table<O> child, ForeignKey<O, RegisterEmployeeRecord> key) {
        super(child, key, REGISTER_EMPLOYEE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegisterEmployee as(String alias) {
        return new RegisterEmployee(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegisterEmployee as(Name alias) {
        return new RegisterEmployee(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisterEmployee rename(String name) {
        return new RegisterEmployee(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisterEmployee rename(Name name) {
        return new RegisterEmployee(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public RegisterEmployee call(String _Name, String _Surname, String _Email, BigDecimal _Salary, String _DepartmentName, String _CompanyName) {
        return new RegisterEmployee(DSL.name(getName()), null, new Field[] { 
              DSL.val(_Name, org.jooq.impl.SQLDataType.CLOB)
            , DSL.val(_Surname, org.jooq.impl.SQLDataType.CLOB)
            , DSL.val(_Email, org.jooq.impl.SQLDataType.CLOB)
            , DSL.val(_Salary, org.jooq.impl.SQLDataType.NUMERIC)
            , DSL.val(_DepartmentName, org.jooq.impl.SQLDataType.CLOB)
            , DSL.val(_CompanyName, org.jooq.impl.SQLDataType.CLOB)
        });
    }

    /**
     * Call this table-valued function
     */
    public RegisterEmployee call(Field<String> _Name, Field<String> _Surname, Field<String> _Email, Field<BigDecimal> _Salary, Field<String> _DepartmentName, Field<String> _CompanyName) {
        return new RegisterEmployee(DSL.name(getName()), null, new Field[] { 
              _Name
            , _Surname
            , _Email
            , _Salary
            , _DepartmentName
            , _CompanyName
        });
    }
}
