/*
 * This file is generated by jOOQ.
 */
package com.clevergang.dbtests.repository.impl.jooq.generated;


import com.clevergang.dbtests.repository.impl.jooq.generated.tables.Company;
import com.clevergang.dbtests.repository.impl.jooq.generated.tables.Department;
import com.clevergang.dbtests.repository.impl.jooq.generated.tables.Employee;
import com.clevergang.dbtests.repository.impl.jooq.generated.tables.Project;
import com.clevergang.dbtests.repository.impl.jooq.generated.tables.Projectemployee;
import com.clevergang.dbtests.repository.impl.jooq.generated.tables.RegisterEmployee;
import com.clevergang.dbtests.repository.impl.jooq.generated.tables.records.RegisterEmployeeRecord;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;
import org.jooq.Sequence;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Public extends SchemaImpl {

    private static final long serialVersionUID = -1770482707;

    /**
     * The reference instance of <code>public</code>
     */
    public static final Public PUBLIC = new Public();

    /**
     * The table <code>public.company</code>.
     */
    public final Company COMPANY = com.clevergang.dbtests.repository.impl.jooq.generated.tables.Company.COMPANY;

    /**
     * The table <code>public.department</code>.
     */
    public final Department DEPARTMENT = com.clevergang.dbtests.repository.impl.jooq.generated.tables.Department.DEPARTMENT;

    /**
     * The table <code>public.employee</code>.
     */
    public final Employee EMPLOYEE = com.clevergang.dbtests.repository.impl.jooq.generated.tables.Employee.EMPLOYEE;

    /**
     * The table <code>public.project</code>.
     */
    public final Project PROJECT = com.clevergang.dbtests.repository.impl.jooq.generated.tables.Project.PROJECT;

    /**
     * The table <code>public.projectemployee</code>.
     */
    public final Projectemployee PROJECTEMPLOYEE = com.clevergang.dbtests.repository.impl.jooq.generated.tables.Projectemployee.PROJECTEMPLOYEE;

    /**
     * The table <code>public.register_employee</code>.
     */
    public final RegisterEmployee REGISTER_EMPLOYEE = com.clevergang.dbtests.repository.impl.jooq.generated.tables.RegisterEmployee.REGISTER_EMPLOYEE;

    /**
     * Call <code>public.register_employee</code>.
     */
    public static Result<RegisterEmployeeRecord> REGISTER_EMPLOYEE(Configuration configuration, String _Name, String _Surname, String _Email, BigDecimal _Salary, String _DepartmentName, String _CompanyName) {
        return configuration.dsl().selectFrom(com.clevergang.dbtests.repository.impl.jooq.generated.tables.RegisterEmployee.REGISTER_EMPLOYEE.call(_Name, _Surname, _Email, _Salary, _DepartmentName, _CompanyName)).fetch();
    }

    /**
     * Get <code>public.register_employee</code> as a table.
     */
    public static RegisterEmployee REGISTER_EMPLOYEE(String _Name, String _Surname, String _Email, BigDecimal _Salary, String _DepartmentName, String _CompanyName) {
        return com.clevergang.dbtests.repository.impl.jooq.generated.tables.RegisterEmployee.REGISTER_EMPLOYEE.call(_Name, _Surname, _Email, _Salary, _DepartmentName, _CompanyName);
    }

    /**
     * Get <code>public.register_employee</code> as a table.
     */
    public static RegisterEmployee REGISTER_EMPLOYEE(Field<String> _Name, Field<String> _Surname, Field<String> _Email, Field<BigDecimal> _Salary, Field<String> _DepartmentName, Field<String> _CompanyName) {
        return com.clevergang.dbtests.repository.impl.jooq.generated.tables.RegisterEmployee.REGISTER_EMPLOYEE.call(_Name, _Surname, _Email, _Salary, _DepartmentName, _CompanyName);
    }

    /**
     * No further instances allowed
     */
    private Public() {
        super("public", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Sequence<?>> getSequences() {
        List result = new ArrayList();
        result.addAll(getSequences0());
        return result;
    }

    private final List<Sequence<?>> getSequences0() {
        return Arrays.<Sequence<?>>asList(
            Sequences.COMPANY_PID_SEQ,
            Sequences.DEPARTMENT_PID_SEQ,
            Sequences.EMPLOYEE_PID_SEQ,
            Sequences.PROJECT_PID_SEQ);
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Company.COMPANY,
            Department.DEPARTMENT,
            Employee.EMPLOYEE,
            Project.PROJECT,
            Projectemployee.PROJECTEMPLOYEE,
            RegisterEmployee.REGISTER_EMPLOYEE);
    }
}
